generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(user)
  captureLikes  CaptureLike[] // Add this reciprocal relation
  storyLikes    StoryLike[]
  playbackLikes playbackLike[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerifiedEmail {
  id           Int         @id @default(autoincrement())
  email        String
  name         String
  phone_number String
  college      CollegeType //internal/externa
}

//Capture model
model Captures {
  id              Int     @id @default(autoincrement())
  image_path      String
  compressed_path String
  event_name      String?
  event_category  String
  captured_by_id  Int
  captured_by     team    @relation(fields: [captured_by_id], references: [id])

  upload_type  String
  state        Status
  date_time    DateTime      @default(now())
  downloadLog  downloadLog[]
  captureLikes CaptureLike[]
}

model downloadLog {
  id           Int      @id @default(autoincrement())
  session_user String
  date_time    DateTime @default(now())
  image_id     Int
  Captures     Captures @relation(fields: [image_id], references: [id])
}

model CaptureLike {
  id          String   @id @default(cuid())
  userId      String
  captures_id Int
  liked       Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Captures    Captures @relation(fields: [captures_id], references: [id], onDelete: Cascade)

  @@unique([userId, captures_id])
}

model CaptureCard {
  id        Int     @id @default(autoincrement())
  cardName  String
  cardState Boolean @default(false)
}

//Stories model
model Stories {
  id             Int             @id @default(autoincrement())
  video_path     String
  captured_by_id Int
  captured_by    team            @relation(fields: [captured_by_id], references: [id])
  date_time      DateTime        @default(now())
  category_name  String
  category       storycategories @relation(fields: [category_name], references: [name])
  storyLog       StoryLog[]
  storyLikes     StoryLike[]
}

model storycategories {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  stories Stories[]
}

model StoryLog {
  id           Int      @id @default(autoincrement())
  session_user String
  date_time    DateTime @default(now())
  story_id     Int
  story        Stories  @relation(fields: [story_id], references: [id])
}

model StoryLike {
  id       String  @id @default(cuid())
  userId   String
  story_id Int
  liked    Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Story    Stories @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@unique([userId, story_id])
}

model team {
  id          Int        @id @default(autoincrement())
  name        String
  committee   Teamgroup
  designation String
  image       String
  say         String
  github      String?
  linkedin    String?
  instagram   String?
  behance     String?
  captures    Captures[]
  stories     Stories[]
}

//Playbacks model
model Playbacks {
  id            Int            @id @default(autoincrement())
  thumbnails    String?
  videoPath     String
  name          String
  description   String
  playbackLog   PlaybackLog[]
  playbackLikes playbackLike[]
}

model PlaybackLog {
  id           Int       @id @default(autoincrement())
  session_user String
  date_time    DateTime  @default(now())
  playback_id  Int
  playback     Playbacks @relation(fields: [playback_id], references: [id])
}

model playbackLike {
  id          String    @id @default(cuid())
  userId      String
  playback_id Int
  liked       Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playback    Playbacks @relation(fields: [playback_id], references: [id], onDelete: Cascade)

  @@unique([userId, playback_id])
}

model RemovalRequest {
  id          Int    @id @default(autoincrement())
  name        String
  idcard      String
  description String
  image_path  String
  email       String
  status      Status @default(pending)
}

model events {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  description      String
  shortDescription String // New field for short description
  image            String
  type             EventType
  day              Day
  visibility       Boolean   @default(false)
}

model webAnalytics {
  id           Int      @id @default(autoincrement())
  session_user String
  uniqueId     String
  routePath    String
  isChecked    String
  timer        Int?
  startPing    DateTime
  lastPing     DateTime
  device       String
}

model Smcuploads {
  id          Int      @id @default(autoincrement())
  video_path  String
  description String
  author      String
  date_time   DateTime @default(now())
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  sessionUserName String
  audit_type      String
  dateTime        DateTime @default(now())
  description     String
}

model Variables {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

enum Status {
  pending
  declined
  approved
}

enum EventType {
  core
  technical
  nontechnical
  special
}

enum Day {
  day1
  day2
  day3
}

enum Teamgroup {
  media
  socialmedia
  developer
  none
}

enum CollegeType {
  internal
  external
}

enum Role {
  admin
  manager
  editor
  user
  smc
}
