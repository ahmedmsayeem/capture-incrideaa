/**
 * Prisma Schema for Capture Incridea Application
 * Main database configuration and model definitions
 * Using CockroachDB as the database provider
 */

// Database configuration and client generation
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

/**
 * Core Models
 * Primary models for user authentication and session management
 */

// User model with OAuth and role-based access
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]      // OAuth accounts associated with user
  sessions      Session[]      // Active sessions for user
  role          Role           @default(user)
  captureLikes  CaptureLike[]  // User's liked captures
  storyLikes    StoryLike[]    // User's liked stories
  playbackLikes playbackLike[] // User's liked playbacks
}

// OAuth account connections
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerifiedEmail {
  id           Int         @id @default(sequence())
  email        String
  name         String
  phone_number String
  college      CollegeType //internal/externa
}

/**
 * Media Management Models
 * Models for handling different types of media content
 */

// Captures model for managing images
model Captures {
  id              Int           @id @default(sequence())
  image_path      String        // Path to original image
  compressed_path String        // Path to compressed version
  event_name      String?       // Optional event reference
  event_category  String        // Category classification
  captured_by_id  Int           // Photographer reference
  upload_type     String        // Upload method identifier
  state           Status        // Current approval state
  date_time       DateTime      @default(now())
  // Relations
  captured_by     team          @relation(fields: [captured_by_id], references: [id])
  downloadLog     downloadLog[] // Download tracking
  captureLikes    CaptureLike[] // Like tracking
}

model downloadLog {
  id           Int      @id @default(sequence())
  session_user String
  date_time    DateTime @default(now())
  image_id     Int
  Captures     Captures @relation(fields: [image_id], references: [id])
}

model CaptureLike {
  id          String   @id @default(cuid())
  userId      String
  captures_id Int
  liked       Boolean  @default(true)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Captures    Captures @relation(fields: [captures_id], references: [id], onDelete: Cascade)

  @@unique([userId, captures_id])
}

model CaptureCard {
  id        Int     @id @default(sequence())
  cardName  String
  cardState Boolean @default(false)
}

/**
 * Story and Playback Models
 * Models for video content management
 */

// Stories model for short-form video content
model Stories {
  id             Int             @id @default(sequence())
  video_path     String
  captured_by_id Int
  captured_by    team            @relation(fields: [captured_by_id], references: [id])
  date_time      DateTime        @default(now())
  category_name  String
  category       storycategories @relation(fields: [category_name], references: [name])
  storyLog       StoryLog[]
  storyLikes     StoryLike[]
}

model storycategories {
  id      Int       @id @default(sequence())
  name    String    @unique
  stories Stories[]
}

model StoryLog {
  id           Int      @id @default(sequence())
  session_user String
  date_time    DateTime @default(now())
  story_id     Int
  story        Stories  @relation(fields: [story_id], references: [id])
}

model StoryLike {
  id       String  @id @default(cuid())
  userId   String
  story_id Int
  liked    Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Story    Stories @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@unique([userId, story_id])
}

/**
 * Team and Event Management
 * Models for managing team members and event information
 */

// Team member model with social links and responsibilities
model team {
  id          Int        @id @default(sequence())
  name        String
  committee   Teamgroup  // Team category
  designation String     // Role in team
  image       String     // Profile image
  say         String     // Team member quote
  github      String?    // Social links
  linkedin    String?
  instagram   String?
  behance     String?
  captures    Captures[] // Captures by team member
  stories     Stories[]  // Stories by team member
}

//Playbacks model
model Playbacks {
  id            Int            @id @default(sequence())
  thumbnails    String?
  videoPath     String
  name          String
  description   String
  playbackLog   PlaybackLog[]
  playbackLikes playbackLike[]
}

model PlaybackLog {
  id           Int       @id @default(sequence())
  session_user String
  date_time    DateTime  @default(now())
  playback_id  Int
  playback     Playbacks @relation(fields: [playback_id], references: [id])
}

model playbackLike {
  id          String    @id @default(cuid())
  userId      String
  playback_id Int
  liked       Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  playback    Playbacks @relation(fields: [playback_id], references: [id], onDelete: Cascade)

  @@unique([userId, playback_id])
}

model RemovalRequest {
  id          Int    @id @default(sequence())
  name        String
  idcard      String
  description String
  image_path  String
  email       String
  status      Status @default(pending)
}

model events {
  id               Int       @id @default(sequence())
  name             String    @unique
  description      String
  shortDescription String    // New field for short description
  image            String
  type             EventType
  day              Day
  visibility       Boolean   @default(false)
}

/**
 * Analytics and Logging Models
 * Models for tracking user activity and system events
 */

// Web analytics tracking
model webAnalytics {
  id           Int      @id @default(sequence())
  session_user String   // User session info
  uniqueId     String   // Unique visitor ID
  routePath    String   // Page accessed
  isChecked    String   // Verification status
  timer        Int?     // Time spent
  startPing    DateTime // Session start
  lastPing     DateTime // Last activity
  device       String   // User device info
}

model Smcuploads {
  id          Int      @id @default(sequence())
  video_path  String
  description String
  author      String
  date_time   DateTime @default(now())
}

// Audit logging for system actions
model AuditLog {
  id              Int      @id @default(sequence())
  sessionUserName String   // User performing action
  audit_type      String   // Type of audit entry
  dateTime        DateTime @default(now())
  description     String   // Audit details
}

model Variables {
  id    Int    @id @default(sequence())
  key   String @unique
  value String
}

/**
 * Enums and Types
 * Consistent data types across the application
 */

// Status states for content approval
enum Status {
  pending
  declined
  approved
}

// User role definitions
enum Role {
  admin    // Full system access
  manager  // Content management access
  editor   // Content editing access
  user     // Basic user access
  smc      // Social media team access
}

enum EventType {
  core
  technical
  nontechnical
  special
}

enum Day {
  day1
  day2
  day3
}

enum Teamgroup {
  media
  socialmedia
  developer
  documentation
  none
}

enum CollegeType {
  internal
  external
}
